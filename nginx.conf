user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    server_tokens off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout  65;

    # Enable gzip compression for bandwidth optimization
    gzip on;
    gzip_disable "msie6";          # Disable gzip for very old browsers
    gzip_vary on;                  # Enable Vary header for proxies
    gzip_proxied any;              # Enable gzip for all proxied requests
    gzip_comp_level 6;             # Compression level (1-9)
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript;

    # Set max upload size to 20MB
    client_max_body_size 20M;

    # Map for WebSocket support: if upgrade header present, set connection to upgrade, else close
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # Proxy headers set globally to apply to all proxied requests
    proxy_set_header Host $host;                        # Forward original host header
    proxy_set_header X-Real-IP $remote_addr;            # Forward client real IP
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward proxy chain IPs
    proxy_set_header X-Forwarded-Proto $scheme;         # Forward original protocol (http/https)

    # Enable HTTP/1.1 to support WebSockets
    proxy_http_version 1.1;

    # Support WebSocket upgrade headers
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    ssl_certificate /certs/live/drosinakis.com/fullchain.pem;
    ssl_certificate_key /certs/live/drosinakis.com/privkey.pem;

    server {
        listen 80;
        server_name _;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
  }
        location / {

        return 301 https://$host$request_uri;
        }
    }



    include /etc/nginx/conf.d/servers/*.conf;



    server {
      listen 443 ssl default_server;
      server_name _;

      return 404;
    }
}

